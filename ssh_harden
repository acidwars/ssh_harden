#!/usr/bin/env bash
# This script will harden you sshd :)
# Tasks of this script:
#	1. Check for root privileges
#	2. Check if sshd_config exists
#	3. Backup current 'sshd_config'
#	4. Check OpenSSH-Server Version
#	5. Change values in 'sshd_config':
#		- Ciphers (will be added if not existing)
#		- KexAlgorithms (will be added if not existing)
#		- MACS (will be added if not existing)
#		- Security Parameters
#	6. Check if any errors occured
#		- Output errors
#		- Correction by user	
SSHD_CONFIG_FILE="/etc/ssh/sshd_config"
ADD_EXTRA=0

usage() {
    echo "usage: $0 [-e] [-f file_name | default is "/etc/ssh/sshd_config"]"
    echo "-e turns on extended security features"
    exit 1
}
options() {
    echo "Adding optional features..."
    sed -i -e 's/^.*Protocol.*$/Protocol 2 #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*LogLevel.*/LogLevel VERBOSE  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*RSAAuthentication.*/RSAAuthentication no  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*PubkeyAuthentication.*/PubkeyAuthentication yes  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*AllowTcpForwarding.*/AllowTcpForwarding no  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*X11Forwarding.*/X11Forwarding no  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*StrictModes.*/StrictModes yes  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*PermitRootLogin.*/PermitRootLogin no  #changed by hardening script/' $TMP_FILE
    sed -i -e 's/^.*MaxAuthTries.*/MaxAuthTries 6  #changed by hardening script/' $TMP_FILE
}

check_sshd_version(){
command -v yum  &> /dev/null
if [[ $? -eq  0 ]]; then
   SSHD_VERSION="$(yum list installed | grep openssh-server | awk '{print $2}' | grep -Eo '^[0-9].[0-9]')"   
else
   SSHD_VERSION="$(apt-show-versions openssh-server | grep -Eo '1:[0-9].[0-9]' | grep -Eo '[0-9]\.[0-9]')" 
fi

echo "Installed OpenSSH-Server Version:" $SSHD_VERSION
}
add_hardening() {
    check_sshd_version
    echo -e "Path to sshd_config = " "\033[31m$SSHD_CONFIG_FILE\033[0m"
    read -p "[Enter] to continue or CTRL+C to exit"
    TMP_FILE=$(mktemp /tmp/sshd_config.tmp.XXXXX)
    cp $SSHD_CONFIG_FILE $TMP_FILE
    #remove all KexAlgorithms Ciphers MACS
    sed -i  "s/^KexAlgorithms /#KexAlgorithms /g" $TMP_FILE
    sed -i  "s/^Ciphers /#Ciphers /g" $TMP_FILE
    sed -i  "s/^MACS /#MACS /g" $TMP_FILE
    #add KexAlgorithms Ciphers MACS to the right place
    sed -i "/Protocol 2.*/a KexAlgorithms \nCiphers \nMACS " $TMP_FILE
    #do hardening
    CHECK_SSH_VERSION=`echo "$SSHD_VERSION < 6.6" | bc`
    if [[ $CHECK_SSH_VERSION -eq "1"  ] ]]; then
        sed -i "s/^KexAlgorithms /KexAlgorithms diffie-hellman-group-exchange-sha256 /g" $TMP_FILE
        sed -i "s/^Ciphers /Ciphers aes256-ctr,aes192-ctr,aes128-ctr /g" $TMP_FILE
        sed -i "s/^MACS /MACS hmac-sha2-512,hmac-sha2-256 /g" $TMP_FILE
    else
        sed -i "s/^KexAlgorithms /KexAlgorithms curve25519-sha256@libssh.org,ecdh-sha2-nistp521,ecdh-sha2-nistp384,ecdh-sha2-nistp256,diffie-hellman-group-exchange-sha256 /g" $TMP_FILE
        sed -i "s/^Ciphers /Ciphers chacha20-poly1305@openssh.com,aes256-gcm@openssh.com,aes128-gcm@openssh.com,aes256-ctr,aes192-ctr,aes128-ctr /g" $TMP_FILE
        sed -i "s/^MACS /MACS hmac-sha2-512-etm@openssh.com,hmac-sha2-256-etm@openssh.com,umac-128-etm@openssh.com,hmac-sha2-512,hmac-sha2-256,umac-128@openssh.com /g" $TMP_FILE
    fi
    if [[ $ADD_EXTRA == 1 ]]; then
        options
    fi
    #test if everything went okay and restart the sshd
    sshd -t -f $TMP_FILE
    if [[ $? -eq  0 ]]; then
        cp $TMP_FILE $SSHD_CONFIG_FILE
        rm -f $TMP_FILE
        if [ -x /usr/bin/systemctl ] ; then
            systemctl restart sshd
        elif [ -x /bin/systemctl ] ; then
            systemctl restart ssh
        else
            /etc/init.d/sshd restart
        fi

    else
        echo "Something went wrong..."
        rm -f $TMP_FILE
        exit -1
    fi

}


while getopts ":E:e:F:f:H:h" opt;do
        case $opt in
                E|e)
                  ADD_EXTRA=1;;
                F|f)
                  SSHD_CONFIG_FILE=$OPTARG;;
                H|h)
                  usage;;
		\?)
                  echo "Invalid option: -$OPTARG" >&2 ;;

 esac
done

if [[ -f $SSHD_CONFIG_FILE ]]; then
    add_hardening
else
    echo "File $SSHD_CONFIG_FILE does not exist"
    exit -1
fi



